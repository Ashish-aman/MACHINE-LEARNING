# -*- coding: utf-8 -*-
"""m22ma002_task01.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1K8JFR284O6P5O7uKmS8AOkwQGB3N0t1m
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn import datasets
import seaborn as sns
import random as rd

from google.colab import files
uploaded = files.upload()

import io
df = pd.read_csv(io.BytesIO(uploaded['citrus.csv']))
print(df)
df.columns

df.shape

df.corr()

x=df[[ 'weight','red', 'green', 'blue']]
n_iter=300
k=2

c = df.iloc[0:10]
for i in c.iterrows():
  print(c)

centroids = (x.sample(n=k))
centroids

plt.figure(figsize = (12,8))
plt.scatter(x["weight"],x["red"],c = x["green"]) #x["red"],x["green"],x["blue"],#
plt.scatter(centroids["weight"],centroids["red"], centroids["green"],color = 'red',alpha =0.60) #centroids["red"],centroids["green"],centroids["blue"],
plt.xlabel('weight')
plt.ylabel('red green blue')
plt.show()

# centroids=np.array([]).reshape(n,0)
# print(centroids)

x=df.drop("diameter",axis  = 1)
df=x.drop("name",axis = 1)
x=df.to_numpy()
x.shape

# Step 3 - Assign all the points to the closest cluster centroid
# Step 4 - Recompute centroids of newly formed clusters
# Step 5 - Repeat step 3 and 4
from scipy.spatial.distance import cdist

def KMeans(x,k, num_point):
  centers = x[np.random.choice(num_point,k,replace =False)]
  classes = np.zeros(num_point).astype(int)

  while True:
    old_classes = classes.copy()
    euclid_dist = cdist(x, centers)**0.5
    classes = np.argmin(euclid_dist, axis =1)

    for i in range(k):
      centers[i,:] = x[classes == i].mean(axis =0)

    if all(old_classes == classes):
      break
  
  return classes, centers

num_point = x.shape[0]
classes, centers = KMeans(x,2,num_point)
print(centers)
print(classes)
# print(euclid_dist)



plt.scatter(x[:,0],x[:,1],c = 'green')
plt.scatter(x[:,0],x[:,2],c = 'blue')
plt.scatter(centers[:,0],centers[:,0], centers[:,0],color = 'red',alpha =0.60) #centroids["red"],centroids["green"],centroids["blue"],
plt.xlabel('weight')
plt.ylabel('red green blue')
plt.show()

num_point = x.shape[0]
classes, centers=KMeans(x,3,num_point)
print(centers)
print(classes)

num_point = x.shape[0]
classes, centers=KMeans(x,4,num_point)
print(centers)
print(classes)